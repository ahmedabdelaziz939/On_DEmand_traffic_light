
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e2e  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000850  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6c  00000000  00000000  00001c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000522  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007cd  00000000  00000000  00002da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000356f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  74:	0c 94 be 01 	jmp	0x37c	; 0x37c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Button_init>:
 */ 

#include "button.h"

void Button_init(uint8_t buttonPort,uint8_t buttonPin){
	Dio_init(buttonPort,buttonPin,INPUT);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	0e 94 86 00 	call	0x10c	; 0x10c <Dio_init>
  82:	08 95       	ret

00000084 <LED_init>:
#include "LED.h"



void LED_init(uint8_t ledPort, uint8_t ledPin){
	Dio_init(ledPort,ledPin,OUTPUT);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	0e 94 86 00 	call	0x10c	; 0x10c <Dio_init>
  8a:	08 95       	ret

0000008c <LED_on>:
}
void LED_on(uint8_t ledPort, uint8_t ledPin){
	Dio_write(ledPort,ledPin,HIGH);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	0e 94 13 01 	call	0x226	; 0x226 <Dio_write>
  92:	08 95       	ret

00000094 <LED_off>:
}
void LED_off(uint8_t ledPort, uint8_t ledPin){
	Dio_write(ledPort,ledPin,LOW);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	0e 94 13 01 	call	0x226	; 0x226 <Dio_write>
  9a:	08 95       	ret

0000009c <main>:

uint8_t PIN_Value;

int main(void)
{
        LED_init(PORT_C,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	83 e4       	ldi	r24, 0x43	; 67
  a0:	0e 94 42 00 	call	0x84	; 0x84 <LED_init>
		LED_init(PORT_C,1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	83 e4       	ldi	r24, 0x43	; 67
  a8:	0e 94 42 00 	call	0x84	; 0x84 <LED_init>
		
        EXTI_INT0_init();
  ac:	0e 94 a2 01 	call	0x344	; 0x344 <EXTI_INT0_init>
		GIE_enable();
  b0:	0e 94 9e 01 	call	0x33c	; 0x33c <GIE_enable>
		
		Button_init(PORT_D,2);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	84 e4       	ldi	r24, 0x44	; 68
  b8:	0e 94 3e 00 	call	0x7c	; 0x7c <Button_init>
    	while (1)
    	{
			  	LED_on(PORT_C,0);  //yellow
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	83 e4       	ldi	r24, 0x43	; 67
  c0:	0e 94 46 00 	call	0x8c	; 0x8c <LED_on>
			  	Start_timer(5000);
  c4:	88 e8       	ldi	r24, 0x88	; 136
  c6:	93 e1       	ldi	r25, 0x13	; 19
  c8:	0e 94 a9 01 	call	0x352	; 0x352 <Start_timer>
			  	Timer_stop();
  cc:	0e 94 bc 01 	call	0x378	; 0x378 <Timer_stop>
				LED_off(PORT_C,0);
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	83 e4       	ldi	r24, 0x43	; 67
  d4:	0e 94 4a 00 	call	0x94	; 0x94 <LED_off>
  d8:	f1 cf       	rjmp	.-30     	; 0xbc <main+0x20>

000000da <__vector_1>:
}
}
void __vector_1(void) __attribute__((signal));     // ISR Function
void __vector_1(void){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
	
	LED_off(PORT_C,0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e4       	ldi	r24, 0x43	; 67
  e8:	0e 94 4a 00 	call	0x94	; 0x94 <LED_off>
	LED_on(PORT_C,1);  // green
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	83 e4       	ldi	r24, 0x43	; 67
  f0:	0e 94 46 00 	call	0x8c	; 0x8c <LED_on>
	Start_timer(5000);
  f4:	88 e8       	ldi	r24, 0x88	; 136
  f6:	93 e1       	ldi	r25, 0x13	; 19
  f8:	0e 94 a9 01 	call	0x352	; 0x352 <Start_timer>
	Timer_stop();
  fc:	0e 94 bc 01 	call	0x378	; 0x378 <Timer_stop>
	LED_off(PORT_C,1);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	83 e4       	ldi	r24, 0x43	; 67
 104:	0e 94 4a 00 	call	0x94	; 0x94 <LED_off>
	
	return main();
 108:	0e 94 4e 00 	call	0x9c	; 0x9c <main>

0000010c <Dio_init>:
#include "dio.h"


EN_Dio_error Dio_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber){
 10c:	82 34       	cpi	r24, 0x42	; 66
 10e:	49 f1       	breq	.+82     	; 0x162 <Dio_init+0x56>
 110:	18 f4       	brcc	.+6      	; 0x118 <Dio_init+0xc>
 112:	81 34       	cpi	r24, 0x41	; 65
 114:	41 f0       	breq	.+16     	; 0x126 <Dio_init+0x1a>
 116:	7d c0       	rjmp	.+250    	; 0x212 <Dio_init+0x106>
 118:	83 34       	cpi	r24, 0x43	; 67
 11a:	09 f4       	brne	.+2      	; 0x11e <Dio_init+0x12>
 11c:	40 c0       	rjmp	.+128    	; 0x19e <Dio_init+0x92>
 11e:	84 34       	cpi	r24, 0x44	; 68
 120:	09 f4       	brne	.+2      	; 0x124 <Dio_init+0x18>
 122:	5a c0       	rjmp	.+180    	; 0x1d8 <Dio_init+0xcc>
 124:	76 c0       	rjmp	.+236    	; 0x212 <Dio_init+0x106>
		case PORT_A:
		if(direction==INPUT){
 126:	41 11       	cpse	r20, r1
 128:	0d c0       	rjmp	.+26     	; 0x144 <Dio_init+0x38>
			DDRA &=~(1<<pinNumber);  // make pin input
 12a:	2a b3       	in	r18, 0x1a	; 26
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_init+0x2a>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_init+0x26>
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	8a bb       	out	0x1a, r24	; 26
			return OK;
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
		}else if(direction==OUTPUT){
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	09 f0       	breq	.+2      	; 0x14a <Dio_init+0x3e>
 148:	66 c0       	rjmp	.+204    	; 0x216 <Dio_init+0x10a>
			DDRA |=(1<<pinNumber);   // make pin output
 14a:	2a b3       	in	r18, 0x1a	; 26
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <Dio_init+0x4a>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <Dio_init+0x46>
 15a:	82 2b       	or	r24, r18
 15c:	8a bb       	out	0x1a, r24	; 26
			return OK;
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 95       	ret
		}else{
          return Dio_init_error;		// error handling
		}
		break;
		case PORT_B:
		if(direction==INPUT){
 162:	41 11       	cpse	r20, r1
 164:	0d c0       	rjmp	.+26     	; 0x180 <Dio_init+0x74>
			DDRB &=~(1<<pinNumber);  // make pin input
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Dio_init+0x66>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <Dio_init+0x62>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	87 bb       	out	0x17, r24	; 23
			return OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
			}else if(direction==OUTPUT){
 180:	41 30       	cpi	r20, 0x01	; 1
 182:	09 f0       	breq	.+2      	; 0x186 <Dio_init+0x7a>
 184:	4a c0       	rjmp	.+148    	; 0x21a <Dio_init+0x10e>
			DDRB |=(1<<pinNumber); //make pin output
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <Dio_init+0x86>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <Dio_init+0x82>
 196:	82 2b       	or	r24, r18
 198:	87 bb       	out	0x17, r24	; 23
			return OK;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
			}else{
            return Dio_init_error;			// error handling
		}
		break;
		case PORT_C:
		if(direction==INPUT){
 19e:	41 11       	cpse	r20, r1
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <Dio_init+0xb0>
			DDRC &=~(1<<pinNumber);     // make pin input
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Dio_init+0xa2>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <Dio_init+0x9e>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	84 bb       	out	0x14, r24	; 20
			return OK;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret
			}else if(direction==OUTPUT){
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	79 f5       	brne	.+94     	; 0x21e <Dio_init+0x112>
			DDRC |=(1<<pinNumber);    // make pin output
 1c0:	24 b3       	in	r18, 0x14	; 20
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Dio_init+0xc0>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <Dio_init+0xbc>
 1d0:	82 2b       	or	r24, r18
 1d2:	84 bb       	out	0x14, r24	; 20
			return OK;
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret
			}else{
		     return Dio_init_error;	// error handling
		}
		break;
		case PORT_D:
		if(direction==INPUT){
 1d8:	41 11       	cpse	r20, r1
 1da:	0d c0       	rjmp	.+26     	; 0x1f6 <Dio_init+0xea>
			DDRD &=~(1<<pinNumber);   //make pin input
 1dc:	21 b3       	in	r18, 0x11	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Dio_init+0xdc>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Dio_init+0xd8>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	81 bb       	out	0x11, r24	; 17
			return OK;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
			}else if(direction==OUTPUT){
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	a1 f4       	brne	.+40     	; 0x222 <Dio_init+0x116>
			DDRD |=(1<<pinNumber);   //make pin output
 1fa:	21 b3       	in	r18, 0x11	; 17
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <Dio_init+0xfa>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <Dio_init+0xf6>
 20a:	82 2b       	or	r24, r18
 20c:	81 bb       	out	0x11, r24	; 17
			return OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
			}else{
	        return Dio_init_error;		// error handling
		}
		break;
		default:
		return Dio_init_error;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
			return OK;
		}else if(direction==OUTPUT){
			DDRA |=(1<<pinNumber);   // make pin output
			return OK;
		}else{
          return Dio_init_error;		// error handling
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret
			return OK;
			}else if(direction==OUTPUT){
			DDRB |=(1<<pinNumber); //make pin output
			return OK;
			}else{
            return Dio_init_error;			// error handling
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	08 95       	ret
			return OK;
			}else if(direction==OUTPUT){
			DDRC |=(1<<pinNumber);    // make pin output
			return OK;
			}else{
		     return Dio_init_error;	// error handling
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret
			return OK;
			}else if(direction==OUTPUT){
			DDRD |=(1<<pinNumber);   //make pin output
			return OK;
			}else{
	        return Dio_init_error;		// error handling
 222:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return Dio_init_error;
		break;
		
	}
}
 224:	08 95       	ret

00000226 <Dio_write>:
EN_Dio_error Dio_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 226:	82 34       	cpi	r24, 0x42	; 66
 228:	49 f1       	breq	.+82     	; 0x27c <Dio_write+0x56>
 22a:	18 f4       	brcc	.+6      	; 0x232 <Dio_write+0xc>
 22c:	81 34       	cpi	r24, 0x41	; 65
 22e:	41 f0       	breq	.+16     	; 0x240 <Dio_write+0x1a>
 230:	7b c0       	rjmp	.+246    	; 0x328 <Dio_write+0x102>
 232:	83 34       	cpi	r24, 0x43	; 67
 234:	09 f4       	brne	.+2      	; 0x238 <Dio_write+0x12>
 236:	40 c0       	rjmp	.+128    	; 0x2b8 <Dio_write+0x92>
 238:	84 34       	cpi	r24, 0x44	; 68
 23a:	09 f4       	brne	.+2      	; 0x23e <Dio_write+0x18>
 23c:	5a c0       	rjmp	.+180    	; 0x2f2 <Dio_write+0xcc>
 23e:	74 c0       	rjmp	.+232    	; 0x328 <Dio_write+0x102>
		case PORT_A:
		if(value==LOW){
 240:	41 11       	cpse	r20, r1
 242:	0d c0       	rjmp	.+26     	; 0x25e <Dio_write+0x38>
			PORTA &=~(1<<pinNumber);  // write 0
 244:	2b b3       	in	r18, 0x1b	; 27
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Dio_write+0x2a>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <Dio_write+0x26>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	8b bb       	out	0x1b, r24	; 27
		    return OK;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
			}else if(value==HIGH){  
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	09 f0       	breq	.+2      	; 0x264 <Dio_write+0x3e>
 262:	64 c0       	rjmp	.+200    	; 0x32c <Dio_write+0x106>
			PORTA |=(1<<pinNumber); //write 1
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Dio_write+0x4a>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <Dio_write+0x46>
 274:	82 2b       	or	r24, r18
 276:	8b bb       	out	0x1b, r24	; 27
			return OK;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
			}else{
			return Dio_write_error;   // error handling
		}
		break;
		case PORT_B:
		if(value==LOW){
 27c:	41 11       	cpse	r20, r1
 27e:	0d c0       	rjmp	.+26     	; 0x29a <Dio_write+0x74>
			PORTB &=~(1<<pinNumber);   //write 0
 280:	28 b3       	in	r18, 0x18	; 24
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <Dio_write+0x66>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <Dio_write+0x62>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	88 bb       	out	0x18, r24	; 24
			return OK;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
			}else if(value==HIGH){
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <Dio_write+0x7a>
 29e:	48 c0       	rjmp	.+144    	; 0x330 <Dio_write+0x10a>
			PORTB |=(1<<pinNumber);   // write 1
 2a0:	28 b3       	in	r18, 0x18	; 24
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <Dio_write+0x86>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <Dio_write+0x82>
 2b0:	82 2b       	or	r24, r18
 2b2:	88 bb       	out	0x18, r24	; 24
			return OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
			}else{
		return Dio_write_error;  	// error handling
		}
		break;
		case PORT_C:
		if(value==LOW){
 2b8:	41 11       	cpse	r20, r1
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <Dio_write+0xb0>
			PORTC &=~(1<<pinNumber);  // write 0
 2bc:	25 b3       	in	r18, 0x15	; 21
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <Dio_write+0xa2>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <Dio_write+0x9e>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	85 bb       	out	0x15, r24	; 21
			return OK;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
			}else if(value==HIGH){
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	69 f5       	brne	.+90     	; 0x334 <Dio_write+0x10e>
			PORTC |=(1<<pinNumber);   // write 1
 2da:	25 b3       	in	r18, 0x15	; 21
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <Dio_write+0xc0>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <Dio_write+0xbc>
 2ea:	82 2b       	or	r24, r18
 2ec:	85 bb       	out	0x15, r24	; 21
			return OK;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret
			}else{
		return Dio_write_error;  	// error handling
		}
		break;
		case PORT_D:
		if(value==LOW){
 2f2:	41 11       	cpse	r20, r1
 2f4:	0c c0       	rjmp	.+24     	; 0x30e <Dio_write+0xe8>
			PORTD &=~(1<<pinNumber); // write 0
 2f6:	22 b3       	in	r18, 0x12	; 18
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <Dio_write+0xdc>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <Dio_write+0xd8>
 306:	80 95       	com	r24
 308:	82 23       	and	r24, r18
 30a:	82 bb       	out	0x12, r24	; 18
 30c:	0c c0       	rjmp	.+24     	; 0x326 <Dio_write+0x100>
			}else if(value==HIGH){
 30e:	41 30       	cpi	r20, 0x01	; 1
 310:	99 f4       	brne	.+38     	; 0x338 <Dio_write+0x112>
			PORTD |=(1<<pinNumber);  // write 1
 312:	22 b3       	in	r18, 0x12	; 18
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <Dio_write+0xf8>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <Dio_write+0xf4>
 322:	82 2b       	or	r24, r18
 324:	82 bb       	out	0x12, r24	; 18
		break;
		default:
	    return Dio_write_error;    // error
		break;
	}
}
 326:	08 95       	ret
			}else{
		return Dio_write_error; 	 // error handling
		}
		break;
		default:
	    return Dio_write_error;    // error
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	08 95       	ret
		    return OK;
			}else if(value==HIGH){  
			PORTA |=(1<<pinNumber); //write 1
			return OK;
			}else{
			return Dio_write_error;   // error handling
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	08 95       	ret
			return OK;
			}else if(value==HIGH){
			PORTB |=(1<<pinNumber);   // write 1
			return OK;
			}else{
		return Dio_write_error;  	// error handling
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	08 95       	ret
			return OK;
			}else if(value==HIGH){
			PORTC |=(1<<pinNumber);   // write 1
			return OK;
			}else{
		return Dio_write_error;  	// error handling
 334:	83 e0       	ldi	r24, 0x03	; 3
 336:	08 95       	ret
		if(value==LOW){
			PORTD &=~(1<<pinNumber); // write 0
			}else if(value==HIGH){
			PORTD |=(1<<pinNumber);  // write 1
			}else{
		return Dio_write_error; 	 // error handling
 338:	83 e0       	ldi	r24, 0x03	; 3
		break;
		default:
	    return Dio_write_error;    // error
		break;
	}
}
 33a:	08 95       	ret

0000033c <GIE_enable>:
 */ 

#include "GIE.h"

void GIE_enable(void){
	SREG |=(1<<SREG_I);
 33c:	8f b7       	in	r24, 0x3f	; 63
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	8f bf       	out	0x3f, r24	; 63
 342:	08 95       	ret

00000344 <EXTI_INT0_init>:


#include "interrupt.h"

void EXTI_INT0_init(void){
	MCUCR |= (1<<MCUCR_ISC00)|(1<<MCUCR_ISC01); //set sense control as rising edge 
 344:	85 b7       	in	r24, 0x35	; 53
 346:	83 60       	ori	r24, 0x03	; 3
 348:	85 bf       	out	0x35, r24	; 53
	GICR |=(1<<GICR_INT0);    // enable peripheral interrupt INT0
 34a:	8b b7       	in	r24, 0x3b	; 59
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	8b bf       	out	0x3b, r24	; 59
 350:	08 95       	ret

00000352 <Start_timer>:

void Set_timer(){
	  TCCR0=0x00; // normal mode
	  TCNT0=0x00; // set timer initial value
}
void Start_timer(unsigned int overFlowsNumber){
 352:	ac 01       	movw	r20, r24
	unsigned int overFlowCounter=0;
	TCCR0 |=(1<<0);
 354:	83 b7       	in	r24, 0x33	; 51
 356:	81 60       	ori	r24, 0x01	; 1
 358:	83 bf       	out	0x33, r24	; 51
void Set_timer(){
	  TCCR0=0x00; // normal mode
	  TCNT0=0x00; // set timer initial value
}
void Start_timer(unsigned int overFlowsNumber){
	unsigned int overFlowCounter=0;
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |=(1<<0);
	while(overFlowCounter<overFlowsNumber){
 35e:	08 c0       	rjmp	.+16     	; 0x370 <Start_timer+0x1e>
		while((TIFR & (1<<0))==0);
 360:	08 b6       	in	r0, 0x38	; 56
 362:	00 fe       	sbrs	r0, 0
 364:	fd cf       	rjmp	.-6      	; 0x360 <Start_timer+0xe>
		TIFR |=(1<<0);
 366:	98 b7       	in	r25, 0x38	; 56
 368:	91 60       	ori	r25, 0x01	; 1
 36a:	98 bf       	out	0x38, r25	; 56
		overFlowCounter++;
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
	  TCNT0=0x00; // set timer initial value
}
void Start_timer(unsigned int overFlowsNumber){
	unsigned int overFlowCounter=0;
	TCCR0 |=(1<<0);
	while(overFlowCounter<overFlowsNumber){
 370:	24 17       	cp	r18, r20
 372:	35 07       	cpc	r19, r21
 374:	a8 f3       	brcs	.-22     	; 0x360 <Start_timer+0xe>
		while((TIFR & (1<<0))==0);
		TIFR |=(1<<0);
		overFlowCounter++;
	}
	overFlowCounter=0;
}
 376:	08 95       	ret

00000378 <Timer_stop>:
void Timer_stop(){
	TCCR0 =0x00;
 378:	13 be       	out	0x33, r1	; 51
 37a:	08 95       	ret

0000037c <_exit>:
 37c:	f8 94       	cli

0000037e <__stop_program>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <__stop_program>
