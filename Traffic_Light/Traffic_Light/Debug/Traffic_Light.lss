
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000006d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012af  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000880  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3d  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000073d  00000000  00000000  00003699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  74:	0c 94 2c 03 	jmp	0x658	; 0x658 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
uint8_t PIN_Value;

void app_init(void){

	
	LED_init(PORT_A,3);   // car green
  7c:	63 e0       	ldi	r22, 0x03	; 3
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(PORT_A,4);   // car yellow
  84:	64 e0       	ldi	r22, 0x04	; 4
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(PORT_B,4);   // car red 
  8c:	64 e0       	ldi	r22, 0x04	; 4
  8e:	82 e4       	ldi	r24, 0x42	; 66
  90:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	LED_init(PORT_C,0);  // pedestrian green
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	83 e4       	ldi	r24, 0x43	; 67
  98:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(PORT_C,4);  // pedestrian yellow
  9c:	64 e0       	ldi	r22, 0x04	; 4
  9e:	83 e4       	ldi	r24, 0x43	; 67
  a0:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	LED_init(PORT_C,7);  // pedestrian red
  a4:	67 e0       	ldi	r22, 0x07	; 7
  a6:	83 e4       	ldi	r24, 0x43	; 67
  a8:	0e 94 43 01 	call	0x286	; 0x286 <LED_init>
	
	Button_init(PORT_D,2);  // making this pin input 
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 3f 01 	call	0x27e	; 0x27e <Button_init>
	
	Set_timer();         //setting the timer
  b4:	0e 94 14 03 	call	0x628	; 0x628 <Set_timer>
	
	EXTI_INT0_init();    //Interrupt 0
  b8:	0e 94 0d 03 	call	0x61a	; 0x61a <EXTI_INT0_init>
	GIE_enable();        // enable global interrupt
  bc:	0e 94 09 03 	call	0x612	; 0x612 <GIE_enable>
  c0:	08 95       	ret

000000c2 <app_start>:
}
	
void app_start(void){
	
			// normal mode
			LED_on(PORT_A,PIN3);  //car's green led on 
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			LED_on(PORT_C,PIN7);  //ped's red led on 
  ca:	67 e0       	ldi	r22, 0x07	; 7
  cc:	83 e4       	ldi	r24, 0x43	; 67
  ce:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			Start_timer(19532);
  d2:	8c e4       	ldi	r24, 0x4C	; 76
  d4:	9c e4       	ldi	r25, 0x4C	; 76
  d6:	0e 94 17 03 	call	0x62e	; 0x62e <Start_timer>
			Timer_stop();
  da:	0e 94 2a 03 	call	0x654	; 0x654 <Timer_stop>
			LED_off(PORT_A,PIN3);  //car's green led off
  de:	63 e0       	ldi	r22, 0x03	; 3
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN7);  //ped's red led off
  e6:	67 e0       	ldi	r22, 0x07	; 7
  e8:	83 e4       	ldi	r24, 0x43	; 67
  ea:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		
			TWO_LED_blink(PORT_A,PIN4,PORT_C,PIN4);  // Both yellow led on 
  ee:	24 e0       	ldi	r18, 0x04	; 4
  f0:	43 e4       	ldi	r20, 0x43	; 67
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 4f 01 	call	0x29e	; 0x29e <TWO_LED_blink>
			LED_off(PORT_A,PIN4);  //car's yellow led off
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN4);  //ped's yellow led off
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	83 e4       	ldi	r24, 0x43	; 67
 106:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			
			LED_on(PORT_B,PIN4);  //car's Red led on
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			LED_on(PORT_C,PIN0);  //ped's green led on
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	83 e4       	ldi	r24, 0x43	; 67
 116:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			Start_timer(19532);
 11a:	8c e4       	ldi	r24, 0x4C	; 76
 11c:	9c e4       	ldi	r25, 0x4C	; 76
 11e:	0e 94 17 03 	call	0x62e	; 0x62e <Start_timer>
			Timer_stop();
 122:	0e 94 2a 03 	call	0x654	; 0x654 <Timer_stop>
			LED_off(PORT_B,PIN4);  //car's red led off
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	82 e4       	ldi	r24, 0x42	; 66
 12a:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN0);  //ped's green led off
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	83 e4       	ldi	r24, 0x43	; 67
 132:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			
			
			TWO_LED_blink(PORT_A,PIN4,PORT_C,PIN4);  // Both yellow led on
 136:	24 e0       	ldi	r18, 0x04	; 4
 138:	43 e4       	ldi	r20, 0x43	; 67
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 4f 01 	call	0x29e	; 0x29e <TWO_LED_blink>
			LED_off(PORT_A,PIN4);  //car's yellow led off
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN4);  //ped's yellow led off
 14a:	64 e0       	ldi	r22, 0x04	; 4
 14c:	83 e4       	ldi	r24, 0x43	; 67
 14e:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
 152:	08 95       	ret

00000154 <__vector_1>:
}



void __vector_1(void) __attribute__((signal));     // ISR Function 
void __vector_1(void){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
		Dio_read(PORT_B,4,&PIN_Value); // reading pin of car's red led
 176:	40 e6       	ldi	r20, 0x60	; 96
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	64 e0       	ldi	r22, 0x04	; 4
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	0e 94 a5 02 	call	0x54a	; 0x54a <Dio_read>
		if (PIN_Value==HIGH)   // checking if car is red led already on or not
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	29 f5       	brne	.+74     	; 0x1d4 <__vector_1+0x80>
		{
				
			LED_on(PORT_B,PIN4);  //car's Red led on
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			LED_on(PORT_C,PIN0);  //ped's green led on
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	83 e4       	ldi	r24, 0x43	; 67
 196:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			Start_timer(19532);
 19a:	8c e4       	ldi	r24, 0x4C	; 76
 19c:	9c e4       	ldi	r25, 0x4C	; 76
 19e:	0e 94 17 03 	call	0x62e	; 0x62e <Start_timer>
			Timer_stop();
 1a2:	0e 94 2a 03 	call	0x654	; 0x654 <Timer_stop>
			LED_off(PORT_B,PIN4);  //car's red led off
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN0);  //ped's green led off
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	83 e4       	ldi	r24, 0x43	; 67
 1b2:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
				
			TWO_LED_blink(PORT_A,PIN4,PORT_C,PIN4);  // Both yellow led on
 1b6:	24 e0       	ldi	r18, 0x04	; 4
 1b8:	43 e4       	ldi	r20, 0x43	; 67
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 4f 01 	call	0x29e	; 0x29e <TWO_LED_blink>
			LED_off(PORT_A,PIN4);  //car's yellow led off
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN4);  //ped's yellow led off
 1ca:	64 e0       	ldi	r22, 0x04	; 4
 1cc:	83 e4       	ldi	r24, 0x43	; 67
 1ce:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
 1d2:	42 c0       	rjmp	.+132    	; 0x258 <__vector_1+0x104>

			}else {             // if car's red led is not on
			LED_off(PORT_A,3);
 1d4:	63 e0       	ldi	r22, 0x03	; 3
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_A,4);
 1dc:	64 e0       	ldi	r22, 0x04	; 4
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,4);
 1e4:	64 e0       	ldi	r22, 0x04	; 4
 1e6:	83 e4       	ldi	r24, 0x43	; 67
 1e8:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,7);
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	83 e4       	ldi	r24, 0x43	; 67
 1f0:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
				
			TWO_LED_blink(PORT_A,PIN4,PORT_C,PIN4);  // Both yellow led on
 1f4:	24 e0       	ldi	r18, 0x04	; 4
 1f6:	43 e4       	ldi	r20, 0x43	; 67
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 4f 01 	call	0x29e	; 0x29e <TWO_LED_blink>
			LED_off(PORT_A,PIN4);  //car's yellow led off
 200:	64 e0       	ldi	r22, 0x04	; 4
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN4);  //ped's yellow led off
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	83 e4       	ldi	r24, 0x43	; 67
 20c:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
				
			LED_on(PORT_B,PIN4);  //car's Red led on
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			LED_on(PORT_C,PIN0);  //ped's green led on
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	83 e4       	ldi	r24, 0x43	; 67
 21c:	0e 94 47 01 	call	0x28e	; 0x28e <LED_on>
			Start_timer(19532);
 220:	8c e4       	ldi	r24, 0x4C	; 76
 222:	9c e4       	ldi	r25, 0x4C	; 76
 224:	0e 94 17 03 	call	0x62e	; 0x62e <Start_timer>
			Timer_stop();
 228:	0e 94 2a 03 	call	0x654	; 0x654 <Timer_stop>
			LED_off(PORT_B,PIN4);  //car's red led off
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	82 e4       	ldi	r24, 0x42	; 66
 230:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN0);  //ped's green led off
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	83 e4       	ldi	r24, 0x43	; 67
 238:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
				
			TWO_LED_blink(PORT_A,PIN4,PORT_C,PIN4);  // Both yellow led on
 23c:	24 e0       	ldi	r18, 0x04	; 4
 23e:	43 e4       	ldi	r20, 0x43	; 67
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 4f 01 	call	0x29e	; 0x29e <TWO_LED_blink>
			LED_off(PORT_A,PIN4);  //car's yellow led off
 248:	64 e0       	ldi	r22, 0x04	; 4
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
			LED_off(PORT_C,PIN4);  //ped's yellow led off
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	83 e4       	ldi	r24, 0x43	; 67
 254:	0e 94 4b 01 	call	0x296	; 0x296 <LED_off>
		}

		return app_start();
 258:	0e 94 61 00 	call	0xc2	; 0xc2 <app_start>

 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <Button_init>:
 */ 

#include "button.h"

void Button_init(uint8_t buttonPort,uint8_t buttonPin){
	Dio_init(buttonPort,buttonPin,INPUT);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Dio_init>
 284:	08 95       	ret

00000286 <LED_init>:
		Dio_toggle(ledPort,ledPin);
		Start_timer(3907);
		Timer_stop();
		blinkNumber++;
	}
}
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Dio_init>
 28c:	08 95       	ret

0000028e <LED_on>:
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Dio_write>
 294:	08 95       	ret

00000296 <LED_off>:
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Dio_write>
 29c:	08 95       	ret

0000029e <TWO_LED_blink>:
void TWO_LED_blink(uint8_t ledPort_1, uint8_t ledPin_1,uint8_t ledPort_2, uint8_t ledPin_2){
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	e8 2e       	mov	r14, r24
 2ac:	f6 2e       	mov	r15, r22
 2ae:	04 2f       	mov	r16, r20
 2b0:	12 2f       	mov	r17, r18
	unsigned int blinkNumber=0;
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
	while(blinkNumber<5){
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <TWO_LED_blink+0x38>
		Dio_toggle(ledPort_1,ledPin_1);
 2b8:	6f 2d       	mov	r22, r15
 2ba:	8e 2d       	mov	r24, r14
 2bc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Dio_toggle>
		Dio_toggle(ledPort_2,ledPin_2);
 2c0:	61 2f       	mov	r22, r17
 2c2:	80 2f       	mov	r24, r16
 2c4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Dio_toggle>
		Start_timer(3907);
 2c8:	83 e4       	ldi	r24, 0x43	; 67
 2ca:	9f e0       	ldi	r25, 0x0F	; 15
 2cc:	0e 94 17 03 	call	0x62e	; 0x62e <Start_timer>
		Timer_stop();
 2d0:	0e 94 2a 03 	call	0x654	; 0x654 <Timer_stop>
		blinkNumber++;
 2d4:	21 96       	adiw	r28, 0x01	; 1
		blinkNumber++;
	}
}
void TWO_LED_blink(uint8_t ledPort_1, uint8_t ledPin_1,uint8_t ledPort_2, uint8_t ledPin_2){
	unsigned int blinkNumber=0;
	while(blinkNumber<5){
 2d6:	c5 30       	cpi	r28, 0x05	; 5
 2d8:	d1 05       	cpc	r29, r1
 2da:	70 f3       	brcs	.-36     	; 0x2b8 <TWO_LED_blink+0x1a>
		Dio_toggle(ledPort_2,ledPin_2);
		Start_timer(3907);
		Timer_stop();
		blinkNumber++;
	}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	08 95       	ret

000002ea <main>:



int main(void)
{
        app_init();
 2ea:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
    	while (1)
    	{
	    app_start();
 2ee:	0e 94 61 00 	call	0xc2	; 0xc2 <app_start>
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <main+0x4>

000002f4 <Dio_init>:
#include "dio.h"


void Dio_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber){
 2f4:	82 34       	cpi	r24, 0x42	; 66
 2f6:	31 f1       	breq	.+76     	; 0x344 <Dio_init+0x50>
 2f8:	18 f4       	brcc	.+6      	; 0x300 <Dio_init+0xc>
 2fa:	81 34       	cpi	r24, 0x41	; 65
 2fc:	39 f0       	breq	.+14     	; 0x30c <Dio_init+0x18>
 2fe:	08 95       	ret
 300:	83 34       	cpi	r24, 0x43	; 67
 302:	e1 f1       	breq	.+120    	; 0x37c <Dio_init+0x88>
 304:	84 34       	cpi	r24, 0x44	; 68
 306:	09 f4       	brne	.+2      	; 0x30a <Dio_init+0x16>
 308:	54 c0       	rjmp	.+168    	; 0x3b2 <Dio_init+0xbe>
 30a:	08 95       	ret
		case PORT_A:
		if(direction==INPUT){
 30c:	41 11       	cpse	r20, r1
 30e:	0c c0       	rjmp	.+24     	; 0x328 <Dio_init+0x34>
			DDRA &=~(1<<pinNumber);  // make pin input
 310:	2a b3       	in	r18, 0x1a	; 26
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <Dio_init+0x28>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <Dio_init+0x24>
 320:	80 95       	com	r24
 322:	82 23       	and	r24, r18
 324:	8a bb       	out	0x1a, r24	; 26
 326:	08 95       	ret
		}else if(direction==OUTPUT){
 328:	41 30       	cpi	r20, 0x01	; 1
 32a:	09 f0       	breq	.+2      	; 0x32e <Dio_init+0x3a>
 32c:	5c c0       	rjmp	.+184    	; 0x3e6 <Dio_init+0xf2>
			DDRA |=(1<<pinNumber);   // make pin output
 32e:	2a b3       	in	r18, 0x1a	; 26
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <Dio_init+0x46>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <Dio_init+0x42>
 33e:	82 2b       	or	r24, r18
 340:	8a bb       	out	0x1a, r24	; 26
 342:	08 95       	ret
		}else{
			// error handling
		}
		break;
		case PORT_B:
		if(direction==INPUT){
 344:	41 11       	cpse	r20, r1
 346:	0c c0       	rjmp	.+24     	; 0x360 <Dio_init+0x6c>
			DDRB &=~(1<<pinNumber);  // make pin input
 348:	27 b3       	in	r18, 0x17	; 23
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <Dio_init+0x60>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <Dio_init+0x5c>
 358:	80 95       	com	r24
 35a:	82 23       	and	r24, r18
 35c:	87 bb       	out	0x17, r24	; 23
 35e:	08 95       	ret
			}else if(direction==OUTPUT){
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <Dio_init+0x72>
 364:	40 c0       	rjmp	.+128    	; 0x3e6 <Dio_init+0xf2>
			DDRB |=(1<<pinNumber); //make pin output
 366:	27 b3       	in	r18, 0x17	; 23
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <Dio_init+0x7e>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <Dio_init+0x7a>
 376:	82 2b       	or	r24, r18
 378:	87 bb       	out	0x17, r24	; 23
 37a:	08 95       	ret
			}else{
			// error handling
		}
		break;
		case PORT_C:
		if(direction==INPUT){
 37c:	41 11       	cpse	r20, r1
 37e:	0c c0       	rjmp	.+24     	; 0x398 <Dio_init+0xa4>
			DDRC &=~(1<<pinNumber);     // make pin input
 380:	24 b3       	in	r18, 0x14	; 20
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <Dio_init+0x98>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <Dio_init+0x94>
 390:	80 95       	com	r24
 392:	82 23       	and	r24, r18
 394:	84 bb       	out	0x14, r24	; 20
 396:	08 95       	ret
			}else if(direction==OUTPUT){
 398:	41 30       	cpi	r20, 0x01	; 1
 39a:	29 f5       	brne	.+74     	; 0x3e6 <Dio_init+0xf2>
			DDRC |=(1<<pinNumber);    // make pin output
 39c:	24 b3       	in	r18, 0x14	; 20
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <Dio_init+0xb4>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <Dio_init+0xb0>
 3ac:	82 2b       	or	r24, r18
 3ae:	84 bb       	out	0x14, r24	; 20
 3b0:	08 95       	ret
			}else{
			// error handling
		}
		break;
		case PORT_D:
		if(direction==INPUT){
 3b2:	41 11       	cpse	r20, r1
 3b4:	0c c0       	rjmp	.+24     	; 0x3ce <Dio_init+0xda>
			DDRD &=~(1<<pinNumber);   //make pin input
 3b6:	21 b3       	in	r18, 0x11	; 17
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Dio_init+0xce>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Dio_init+0xca>
 3c6:	80 95       	com	r24
 3c8:	82 23       	and	r24, r18
 3ca:	81 bb       	out	0x11, r24	; 17
 3cc:	08 95       	ret
			}else if(direction==OUTPUT){
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	51 f4       	brne	.+20     	; 0x3e6 <Dio_init+0xf2>
			DDRD |=(1<<pinNumber);   //make pin output
 3d2:	21 b3       	in	r18, 0x11	; 17
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <Dio_init+0xea>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <Dio_init+0xe6>
 3e2:	82 2b       	or	r24, r18
 3e4:	81 bb       	out	0x11, r24	; 17
 3e6:	08 95       	ret

000003e8 <Dio_write>:
		break;
		
	}
}
void Dio_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 3e8:	82 34       	cpi	r24, 0x42	; 66
 3ea:	31 f1       	breq	.+76     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3ec:	18 f4       	brcc	.+6      	; 0x3f4 <Dio_write+0xc>
 3ee:	81 34       	cpi	r24, 0x41	; 65
 3f0:	39 f0       	breq	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f2:	08 95       	ret
 3f4:	83 34       	cpi	r24, 0x43	; 67
 3f6:	e1 f1       	breq	.+120    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 3f8:	84 34       	cpi	r24, 0x44	; 68
 3fa:	09 f4       	brne	.+2      	; 0x3fe <Dio_write+0x16>
 3fc:	54 c0       	rjmp	.+168    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 3fe:	08 95       	ret
		case PORT_A:
		if(value==LOW){
 400:	41 11       	cpse	r20, r1
 402:	0c c0       	rjmp	.+24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			PORTA &=~(1<<pinNumber);  // write 0
 404:	2b b3       	in	r18, 0x1b	; 27
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	8b bb       	out	0x1b, r24	; 27
 41a:	08 95       	ret
			}else if(value==HIGH){  
 41c:	41 30       	cpi	r20, 0x01	; 1
 41e:	09 f0       	breq	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	5c c0       	rjmp	.+184    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			PORTA |=(1<<pinNumber); //write 1
 422:	2b b3       	in	r18, 0x1b	; 27
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	82 2b       	or	r24, r18
 434:	8b bb       	out	0x1b, r24	; 27
 436:	08 95       	ret
			}else{
			// error handling
		}
		break;
		case PORT_B:
		if(value==LOW){
 438:	41 11       	cpse	r20, r1
 43a:	0c c0       	rjmp	.+24     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			PORTB &=~(1<<pinNumber);   //write 0
 43c:	28 b3       	in	r18, 0x18	; 24
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	88 bb       	out	0x18, r24	; 24
 452:	08 95       	ret
			}else if(value==HIGH){
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	09 f0       	breq	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 458:	40 c0       	rjmp	.+128    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			PORTB |=(1<<pinNumber);   // write 1
 45a:	28 b3       	in	r18, 0x18	; 24
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	82 2b       	or	r24, r18
 46c:	88 bb       	out	0x18, r24	; 24
 46e:	08 95       	ret
			}else{
			// error handling
		}
		break;
		case PORT_C:
		if(value==LOW){
 470:	41 11       	cpse	r20, r1
 472:	0c c0       	rjmp	.+24     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			PORTC &=~(1<<pinNumber);  // write 0
 474:	25 b3       	in	r18, 0x15	; 21
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 484:	80 95       	com	r24
 486:	82 23       	and	r24, r18
 488:	85 bb       	out	0x15, r24	; 21
 48a:	08 95       	ret
			}else if(value==HIGH){
 48c:	41 30       	cpi	r20, 0x01	; 1
 48e:	29 f5       	brne	.+74     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			PORTC |=(1<<pinNumber);   // write 1
 490:	25 b3       	in	r18, 0x15	; 21
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	82 2b       	or	r24, r18
 4a2:	85 bb       	out	0x15, r24	; 21
 4a4:	08 95       	ret
			}else{
			// error handling
		}
		break;
		case PORT_D:
		if(value==LOW){
 4a6:	41 11       	cpse	r20, r1
 4a8:	0c c0       	rjmp	.+24     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			PORTD &=~(1<<pinNumber); // write 0
 4aa:	22 b3       	in	r18, 0x12	; 18
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ba:	80 95       	com	r24
 4bc:	82 23       	and	r24, r18
 4be:	82 bb       	out	0x12, r24	; 18
 4c0:	08 95       	ret
			}else if(value==HIGH){
 4c2:	41 30       	cpi	r20, 0x01	; 1
 4c4:	51 f4       	brne	.+20     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			PORTD |=(1<<pinNumber);  // write 1
 4c6:	22 b3       	in	r18, 0x12	; 18
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	82 2b       	or	r24, r18
 4d8:	82 bb       	out	0x12, r24	; 18
 4da:	08 95       	ret

000004dc <Dio_toggle>:
		break;
		
	}
}
void Dio_toggle(uint8_t portNumber, uint8_t pinNumber){
	switch(portNumber){
 4dc:	82 34       	cpi	r24, 0x42	; 66
 4de:	a1 f0       	breq	.+40     	; 0x508 <Dio_toggle+0x2c>
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <Dio_toggle+0xc>
 4e2:	81 34       	cpi	r24, 0x41	; 65
 4e4:	31 f0       	breq	.+12     	; 0x4f2 <Dio_toggle+0x16>
 4e6:	08 95       	ret
 4e8:	83 34       	cpi	r24, 0x43	; 67
 4ea:	c9 f0       	breq	.+50     	; 0x51e <Dio_toggle+0x42>
 4ec:	84 34       	cpi	r24, 0x44	; 68
 4ee:	11 f1       	breq	.+68     	; 0x534 <Dio_toggle+0x58>
 4f0:	08 95       	ret
		case PORT_A:
		PORTA ^=(1<<pinNumber);
 4f2:	2b b3       	in	r18, 0x1b	; 27
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <Dio_toggle+0x22>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <Dio_toggle+0x1e>
 502:	82 27       	eor	r24, r18
 504:	8b bb       	out	0x1b, r24	; 27
		break;
 506:	08 95       	ret
		case PORT_B:
		PORTB ^=(1<<pinNumber);    
 508:	28 b3       	in	r18, 0x18	; 24
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <Dio_toggle+0x38>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <Dio_toggle+0x34>
 518:	82 27       	eor	r24, r18
 51a:	88 bb       	out	0x18, r24	; 24
		break;
 51c:	08 95       	ret
		case PORT_C:
		PORTC ^=(1<<pinNumber);
 51e:	25 b3       	in	r18, 0x15	; 21
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <Dio_toggle+0x4e>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <Dio_toggle+0x4a>
 52e:	82 27       	eor	r24, r18
 530:	85 bb       	out	0x15, r24	; 21
		break;
 532:	08 95       	ret
		case PORT_D:
		PORTD ^=(1<<pinNumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <Dio_toggle+0x64>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <Dio_toggle+0x60>
 544:	82 27       	eor	r24, r18
 546:	82 bb       	out	0x12, r24	; 18
 548:	08 95       	ret

0000054a <Dio_read>:
		break;
		
	}
}
void Dio_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value){
	switch(portNumber){
 54a:	82 34       	cpi	r24, 0x42	; 66
 54c:	01 f1       	breq	.+64     	; 0x58e <Dio_read+0x44>
 54e:	18 f4       	brcc	.+6      	; 0x556 <Dio_read+0xc>
 550:	81 34       	cpi	r24, 0x41	; 65
 552:	39 f0       	breq	.+14     	; 0x562 <Dio_read+0x18>
 554:	08 95       	ret
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	81 f1       	breq	.+96     	; 0x5ba <Dio_read+0x70>
 55a:	84 34       	cpi	r24, 0x44	; 68
 55c:	09 f4       	brne	.+2      	; 0x560 <Dio_read+0x16>
 55e:	43 c0       	rjmp	.+134    	; 0x5e6 <Dio_read+0x9c>
 560:	08 95       	ret
		case PORT_A:
		*value=(PINA & (1<<pinNumber))>>pinNumber;
 562:	79 b3       	in	r23, 0x19	; 25
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	9c 01       	movw	r18, r24
 56a:	06 2e       	mov	r0, r22
 56c:	02 c0       	rjmp	.+4      	; 0x572 <Dio_read+0x28>
 56e:	22 0f       	add	r18, r18
 570:	33 1f       	adc	r19, r19
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <Dio_read+0x24>
 576:	87 2f       	mov	r24, r23
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	82 23       	and	r24, r18
 57c:	93 23       	and	r25, r19
 57e:	02 c0       	rjmp	.+4      	; 0x584 <Dio_read+0x3a>
 580:	95 95       	asr	r25
 582:	87 95       	ror	r24
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <Dio_read+0x36>
 588:	fa 01       	movw	r30, r20
 58a:	80 83       	st	Z, r24
		break;
 58c:	08 95       	ret
		case PORT_B:
		*value=(PINB & (1<<pinNumber))>>pinNumber;
 58e:	76 b3       	in	r23, 0x16	; 22
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	9c 01       	movw	r18, r24
 596:	06 2e       	mov	r0, r22
 598:	02 c0       	rjmp	.+4      	; 0x59e <Dio_read+0x54>
 59a:	22 0f       	add	r18, r18
 59c:	33 1f       	adc	r19, r19
 59e:	0a 94       	dec	r0
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <Dio_read+0x50>
 5a2:	87 2f       	mov	r24, r23
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	82 23       	and	r24, r18
 5a8:	93 23       	and	r25, r19
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <Dio_read+0x66>
 5ac:	95 95       	asr	r25
 5ae:	87 95       	ror	r24
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <Dio_read+0x62>
 5b4:	fa 01       	movw	r30, r20
 5b6:	80 83       	st	Z, r24
		break;
 5b8:	08 95       	ret
		case PORT_C:
		*value=(PINC & (1<<pinNumber))>>pinNumber;
 5ba:	73 b3       	in	r23, 0x13	; 19
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	9c 01       	movw	r18, r24
 5c2:	06 2e       	mov	r0, r22
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Dio_read+0x80>
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <Dio_read+0x7c>
 5ce:	87 2f       	mov	r24, r23
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	82 23       	and	r24, r18
 5d4:	93 23       	and	r25, r19
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <Dio_read+0x92>
 5d8:	95 95       	asr	r25
 5da:	87 95       	ror	r24
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <Dio_read+0x8e>
 5e0:	fa 01       	movw	r30, r20
 5e2:	80 83       	st	Z, r24
		break;
 5e4:	08 95       	ret
		case PORT_D:
		*value=(PIND & (1<<pinNumber))>>pinNumber;
 5e6:	70 b3       	in	r23, 0x10	; 16
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9c 01       	movw	r18, r24
 5ee:	06 2e       	mov	r0, r22
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <Dio_read+0xac>
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <Dio_read+0xa8>
 5fa:	87 2f       	mov	r24, r23
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	82 23       	and	r24, r18
 600:	93 23       	and	r25, r19
 602:	02 c0       	rjmp	.+4      	; 0x608 <Dio_read+0xbe>
 604:	95 95       	asr	r25
 606:	87 95       	ror	r24
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <Dio_read+0xba>
 60c:	fa 01       	movw	r30, r20
 60e:	80 83       	st	Z, r24
 610:	08 95       	ret

00000612 <GIE_enable>:
 */ 

#include "GIE.h"

void GIE_enable(void){
	SREG |=(1<<SREG_I);
 612:	8f b7       	in	r24, 0x3f	; 63
 614:	80 68       	ori	r24, 0x80	; 128
 616:	8f bf       	out	0x3f, r24	; 63
 618:	08 95       	ret

0000061a <EXTI_INT0_init>:


#include "interrupt.h"

void EXTI_INT0_init(void){
	MCUCR |= (1<<MCUCR_ISC00)|(1<<MCUCR_ISC01); //set sense control as rising edge 
 61a:	85 b7       	in	r24, 0x35	; 53
 61c:	83 60       	ori	r24, 0x03	; 3
 61e:	85 bf       	out	0x35, r24	; 53
	GICR |=(1<<GICR_INT0);    // enable peripheral interrupt INT0
 620:	8b b7       	in	r24, 0x3b	; 59
 622:	80 64       	ori	r24, 0x40	; 64
 624:	8b bf       	out	0x3b, r24	; 59
 626:	08 95       	ret

00000628 <Set_timer>:
 */ 
#include "timer.h"


void Set_timer(){
	  TCCR0=0x00; // normal mode
 628:	13 be       	out	0x33, r1	; 51
	  TCNT0=0x00; // set timer initial value
 62a:	12 be       	out	0x32, r1	; 50
 62c:	08 95       	ret

0000062e <Start_timer>:
}
void Start_timer(unsigned int overFlowsNumber){
 62e:	ac 01       	movw	r20, r24
	unsigned int overFlowCounter=0;
	TCCR0 |=(1<<0);
 630:	83 b7       	in	r24, 0x33	; 51
 632:	81 60       	ori	r24, 0x01	; 1
 634:	83 bf       	out	0x33, r24	; 51
void Set_timer(){
	  TCCR0=0x00; // normal mode
	  TCNT0=0x00; // set timer initial value
}
void Start_timer(unsigned int overFlowsNumber){
	unsigned int overFlowCounter=0;
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0 |=(1<<0);
	while(overFlowCounter<overFlowsNumber){
 63a:	08 c0       	rjmp	.+16     	; 0x64c <Start_timer+0x1e>
		while((TIFR & (1<<0))==0);
 63c:	08 b6       	in	r0, 0x38	; 56
 63e:	00 fe       	sbrs	r0, 0
 640:	fd cf       	rjmp	.-6      	; 0x63c <Start_timer+0xe>
		TIFR |=(1<<0);
 642:	98 b7       	in	r25, 0x38	; 56
 644:	91 60       	ori	r25, 0x01	; 1
 646:	98 bf       	out	0x38, r25	; 56
		overFlowCounter++;
 648:	2f 5f       	subi	r18, 0xFF	; 255
 64a:	3f 4f       	sbci	r19, 0xFF	; 255
	  TCNT0=0x00; // set timer initial value
}
void Start_timer(unsigned int overFlowsNumber){
	unsigned int overFlowCounter=0;
	TCCR0 |=(1<<0);
	while(overFlowCounter<overFlowsNumber){
 64c:	24 17       	cp	r18, r20
 64e:	35 07       	cpc	r19, r21
 650:	a8 f3       	brcs	.-22     	; 0x63c <Start_timer+0xe>
		while((TIFR & (1<<0))==0);
		TIFR |=(1<<0);
		overFlowCounter++;
	}
	overFlowCounter=0;
}
 652:	08 95       	ret

00000654 <Timer_stop>:
void Timer_stop(){
	TCCR0 =0x00;
 654:	13 be       	out	0x33, r1	; 51
 656:	08 95       	ret

00000658 <_exit>:
 658:	f8 94       	cli

0000065a <__stop_program>:
 65a:	ff cf       	rjmp	.-2      	; 0x65a <__stop_program>
